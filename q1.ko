#include<linux/init.h>
#include<linux/module.h>

#include<linux/device.h>
#include<linux/kernel.h>
#include<linux/fs.h>
#include<linux/uaccess.h>
#define DEVICE_NAME "ebbchar"
#define CLASS_NAME "ebb"


MODULE_LICENSE("GPL");
MODULE_AUTHOR("MORGEN");
MODULE_DESCRIPTION("a Simple Linux ghar driver for the BBB");
module_version("0.1");
static int majorNumber;
static char message[256]={0};
static short size_of_message;
static int numberOPens=0;
static struct class* ebbcharClass=NULL;
static struct device* ebbcharDevice=NULL;


static int dev_open(struct inode*,struct file*);
static int dev_release(struct inode*,struct file *);
static ssize_t dev_read(struct file*,char*,size_t,loff_t *);
static ssize_t dev_write(struct file*, const char*,size_t,loff_t*);

static struct file_operations fops=
{
   .open=dev_open,
   .read=dev_read,
   .write=dev_write,
   .release=dev_release,
};


static int_init ebbchar_init(void){
printk(KERN_INFO "EBBChar: Initializing the EBBChaR LKM\n");
majorNumber = register_chrdev(0,DEVICE_NAME, &fops);
if(majorNumber<0){
printk(KERN_ALERT "EBBChar failed to register a major number\n");
return majorNUmber;
}
printk(KERN_INFO "EBBChar: registered corrected with majornumber number %d\n",majorNumber);


ebbchar Class=class_create(THIS_MODULE, CLASS_NAME);
if(IS_ERR(ebbcharClass)){
unregister_chrdev()majorNumber, DEVICE_NAME);
printk(KERN_ALERT "Failed to  creat the device\n");
return PTR_ERR(ebbcharDevice);
}
printf(KERN_)INFO "EBBChar:device class created correctly\n");
return 0;
}


static int dev_open(struct inode*inodep,struct file*filep){
numberOpens++;
printk(KERN_INFO "EEBBChar: Device has been opened %d time(s)\n",numberOpens);
return 0;
}
static ssize_t dev_read(struct file *filep,char *buffer,size_t len,loff_t *offset){
int error_count==0;
error_count=copy_to_user(buffer,message,size_of_message);
if (error_count==0){
printk(KERN_INFO"EBBChar:Sent %d characters to the user\n",size_of_message);
return (size_of_message=0);
}
else {
printk(KERN_INFO "EBBChar: Failed to send %d characters to the user\n",error_count);
return -EFAULT;
}
}
static ssize_t dev_write(struct file *filep,const char,size_t len,loff_t *offset){
sprintf(message, "%s(%zu letters)',buffer,len);
size_of_message=strlen(message);
printk(KERN_INFO "EBBChar: Received %zu characters from the user\n",len);
return len;
}
static int dev_release(struct indoe *inodep,struct file*filep){
printk(KERN_INFO "EBBChar: Device sucessfully closed\n");
return 0;
}
module_init(ebbchar_init);
module_exit(ebbchar_exit);

